AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  CreditGuardPipeline

  SAM Template for the real-time credit card fraud detection pipeline.
  Includes Kinesis Stream, Lambda Processor, DynamoDB State Table, and SNS Alerts.

Globals:
  Function:
    Timeout: 30 # Increased timeout for potential processing and AWS calls
    MemorySize: 256 # Increased memory for potential libraries/processing

Resources:
  # 1. Kinesis Data Stream for incoming transactions
  TransactionStream:
    Type: AWS::Kinesis::Stream
    Properties:
      # Generate a unique stream name based on the CloudFormation stack name
      Name: !Sub '${AWS::StackName}-transaction-stream'
      ShardCount: 1 # Start with 1 shard for hackathon purposes
      RetentionPeriodHours: 24

  # 2. DynamoDB Table for storing last card state (Timestamp, Location)
  CardStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-card-state'
      AttributeDefinitions:
        - AttributeName: CardID # Partition key
          AttributeType: S
      KeySchema:
        - AttributeName: CardID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST # Cost-effective for variable load

  # 3. SNS Topic for publishing fraud alerts
  FraudAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: CreditGuard Fraud Detection Alerts
      TopicName: !Sub '${AWS::StackName}-fraud-alerts-topic'

  # 4. Lambda Function to process transactions from Kinesis
  FraudDetectionProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-FraudDetectionProcessor' # Function Name in AWS Console
      CodeUri: hello_world/ # Assumes your Lambda code is in this directory
      Handler: app.lambda_handler # File: app.py, Function: lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment: # Pass resource names/ARNs to the Lambda code
        Variables:
          DYNAMODB_TABLE_NAME: !Ref CardStateTable # Pass table name
          SNS_TOPIC_ARN: !Ref FraudAlertsTopic      # Pass topic ARN
      Policies: # Grant necessary permissions to the Lambda function's execution role
        - KinesisStreamReadPolicy: # Allow reading from the specific Kinesis stream
            StreamName: !GetAtt TransactionStream.Name
        - DynamoDBCrudPolicy:      # Allow Get/Put/Update/Delete on the specific table
            TableName: !Ref CardStateTable
        - SNSPublishMessagePolicy: # Allow publishing to the specific SNS topic
            TopicName: !GetAtt FraudAlertsTopic.TopicName
        # Add policy for SageMaker endpoint invocation if you plan to use ML
        # - Statement:
        #   - Effect: Allow
        #     Action:
        #       - sagemaker:InvokeEndpoint
        #     Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/your-sagemaker-endpoint-name'
      Events: # Define the trigger for the Lambda function
        KinesisTrigger:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TransactionStream.Arn # ARN of the Kinesis stream
            StartingPosition: LATEST # Process only new records
            BatchSize: 100 # Number of records to process per Lambda invocation

  # 5. SNS Subscription to send alerts to an email address (Optional, but useful for testing)
  # !!! IMPORTANT: Replace the Endpoint email address below !!!
  # You will need to confirm this subscription via the email link sent by AWS SNS.
  EmailSubscription:
     Type: AWS::SNS::Subscription
     Properties:
       Protocol: email
       Endpoint: REPLACE_WITH_YOUR_EMAIL@example.com # <-- REPLACE THIS EMAIL ADDRESS
       TopicArn: !Ref FraudAlertsTopic

Outputs:
  # Define outputs to easily find resource names/ARNs after deployment
  KinesisStreamName:
    Description: "Name of the Kinesis Data Stream for transactions"
    Value: !Ref TransactionStream
  KinesisStreamArn:
      Description: "ARN of the Kinesis Data Stream for transactions"
      Value: !GetAtt TransactionStream.Arn
  DynamoDBTableName:
      Description: "Name of the DynamoDB table for storing card state"
      Value: !Ref CardStateTable
  SNSTopicArn:
      Description: "ARN of the SNS topic for fraud alerts"
      Value: !Ref FraudAlertsTopic
  FraudDetectionProcessorFunctionArn:
    Description: "Fraud Detection Processor Lambda Function ARN"
    Value: !GetAtt FraudDetectionProcessorFunction.Arn
  FraudDetectionProcessorFunctionIamRoleArn:
    Description: "Implicit IAM Role created for Fraud Detection Processor function"
    Value: !GetAtt FraudDetectionProcessorFunctionRole.Arn # SAM automatically creates Role name by appending 'Role'